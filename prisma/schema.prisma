generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  username        String   @unique
  hashed_password String
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt
  roles           String[] @default(["USER"])

  purchases Purchase[] @relation("User_1-N_Purchase")
  sales     Sale[]     @relation("Sale_1-N_Purchase")
}

model Game {
  id            Int      @id @default(autoincrement())
  name          String
  image_url     String?
  console       String
  edition       String
  region        String
  released_year Int
  barcode_data  String
  created_at    DateTime @default(now())
  updated_at    DateTime @default(now()) @updatedAt

  Purchases Purchase[] @relation("Game_1-N_Purchase")

  @@unique([name, console, edition, region, released_year])
}

model Purchase {
  id              Int      @id @default(autoincrement())
  user_id         Int
  game_id         Int
  purchased_price Float
  estimated_price Float
  origin          String
  state           String
  content         String[]
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now()) @updatedAt

  User User  @relation("User_1-N_Purchase", fields: [user_id], references: [id], onDelete: Cascade)
  Sale Sale? @relation("Sale_0/1-1_Purchase")
  Game Game  @relation("Game_1-N_Purchase", fields: [game_id], references: [id], onDelete: Cascade)
}

model Sale {
  id           Int      @id @default(autoincrement())
  user_id      Int
  purchase_id  Int
  solded_price Float
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  Purchase Purchase? @relation("Sale_0/1-1_Purchase", fields: [purchase_id], references: [id], onDelete: Cascade)
  User     User      @relation("Sale_1-N_Purchase", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([purchase_id])
}
